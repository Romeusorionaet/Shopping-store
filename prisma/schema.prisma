// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String
  imageUrl String
  products Product[]
}

model Product {
  id                 String         @id @default(uuid())
  name               String
  slug               String
  description        String
  basePrice          Decimal        @db.Decimal(8, 2)
  imageUrls          String[]
  categoryId         String
  quantity           Int            @default(1)
  placeOfSale        String         @default("ONLINE_STORE")
  category           Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  discountPercentage Int            @default(0)
  OrderProduct       OrderProduct[]
}

model Order {
  id            String              @id @default(uuid())
  userId        String
  user          User                @relation(fields: [userId], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @default(now()) @updatedAt
  status        OrderStatus         @default(WAITING_FOR_PAYMENT)
  trackingCode  String              @default("")
  orderTracking OrderStatusTracking @default(WAITING)
  orderProducts OrderProduct[]
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}

enum OrderStatusTracking {
  WAITING
  CANCELED
  PRODUCT_DELIVERED_TO_CORREIOS
  PRODUCT_DELIVERED_TO_CLIENT
}

model OrderProduct {
  id                 String  @id @default(uuid())
  productId          String
  product            Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId            String
  order              Order   @relation(fields: [orderId], references: [id])
  basePrice          Decimal @db.Decimal(8, 2)
  discountPercentage Int     @default(0)
  quantity           Int
}

model HistoricOrder {
  id                 String   @id @default(uuid())
  userId             String
  name               String
  basePrice          Decimal  @db.Decimal(8, 2)
  discountPercentage Int
  quantity           Int
  status             String
  createdAt          DateTime @default(now())
}

model Address {
  id           String @id @default(uuid())
  cep          String
  city         String
  uf           String
  street       String
  neighborhood String
  number       String
  complement   String
  username     String
  phoneNumber  String
  email        String

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  isAdm         Boolean   @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  Address       Address[]
}

model AdmPassword {
  id       String @id @default(uuid())
  password String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
